This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: public/**, node_modules/**, package-lock.json
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.editorconfig
.gitattributes
.gitignore
.prettierrc.json
eslint.config.js
index.html
jsconfig.json
package.json
postcss.config.cjs
README.md
src/App.vue
src/main.js
src/router/index.js
src/services/organizationUnitService.js
src/stores/counter.js
src/stores/organizationUnit.js
src/style.css
src/views/HomeView.vue
src/views/OrganizationUnitView.vue
taiwind.config.cjs
vite.config.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".editorconfig">
[*.{js,jsx,mjs,cjs,ts,tsx,mts,cts,vue,css,scss,sass,less,styl}]
charset = utf-8
indent_size = 2
indent_style = space
insert_final_newline = true
trim_trailing_whitespace = true
end_of_line = lf
max_line_length = 100
</file>

<file path=".gitattributes">
* text=auto eol=lf
</file>

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
.DS_Store
dist
dist-ssr
coverage
*.local

/cypress/videos/
/cypress/screenshots/

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

*.tsbuildinfo
</file>

<file path=".prettierrc.json">
{
  "$schema": "https://json.schemastore.org/prettierrc",
  "semi": false,
  "singleQuote": true,
  "printWidth": 100
}
</file>

<file path="eslint.config.js">
import { defineConfig, globalIgnores } from 'eslint/config'
import globals from 'globals'
import js from '@eslint/js'
import pluginVue from 'eslint-plugin-vue'
import skipFormatting from '@vue/eslint-config-prettier/skip-formatting'

export default defineConfig([
  {
    name: 'app/files-to-lint',
    files: ['**/*.{js,mjs,jsx,vue}'],
  },

  globalIgnores(['**/dist/**', '**/dist-ssr/**', '**/coverage/**']),

  {
    languageOptions: {
      globals: {
        ...globals.browser,
      },
    },
  },

  js.configs.recommended,
  ...pluginVue.configs['flat/essential'],
  skipFormatting,
])
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="">
  <head>
    <meta charset="UTF-8">
    <link rel="icon" href="/favicon.ico">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vite App</title>
  </head>
  <body>
    <div id="app"></div>
    <script type="module" src="/src/main.js"></script>
  </body>
</html>
</file>

<file path="jsconfig.json">
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "exclude": ["node_modules", "dist"]
}
</file>

<file path="package.json">
{
  "name": "vue-vinatex",
  "version": "0.0.0",
  "private": true,
  "type": "module",
  "engines": {
    "node": "^20.19.0 || >=22.12.0"
  },
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "serve": "vite preview --port 4173"
  },
  "dependencies": {
    "@primevue/themes": "^4.3.9",
    "@vueuse/core": "^13.9.0",
    "axios": "^1.12.2",
    "pinia": "^3.0.3",
    "primeicons": "^7.0.0",
    "primevue": "^4.3.9",
    "vue": "^3.5.18",
    "vue-router": "^4.5.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.31.0",
    "@tailwindcss/postcss": "^4.1.13",
    "@vitejs/plugin-basic-ssl": "^2.1.0",
    "@vitejs/plugin-vue": "^6.0.1",
    "@vue/eslint-config-prettier": "^10.2.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.31.0",
    "eslint-plugin-vue": "~10.3.0",
    "globals": "^16.3.0",
    "postcss": "^8.5.6",
    "prettier": "3.6.2",
    "tailwindcss": "^4.1.13",
    "vite": "^7.0.6",
    "vite-plugin-vue-devtools": "^8.0.0"
  }
}
</file>

<file path="postcss.config.cjs">
module.exports = {
  plugins: {
    '@tailwindcss/postcss': {},
    autoprefixer: {},
  },
}
</file>

<file path="README.md">
# vue-vinatex

This template should help get you started developing with Vue 3 in Vite.

## Recommended IDE Setup

[VSCode](https://code.visualstudio.com/) + [Volar](https://marketplace.visualstudio.com/items?itemName=Vue.volar) (and disable Vetur).

## Customize configuration

See [Vite Configuration Reference](https://vite.dev/config/).

## Project Setup

```sh
npm install
```

### Compile and Hot-Reload for Development

```sh
npm run dev
```

### Compile and Minify for Production

```sh
npm run build
```

### Lint with [ESLint](https://eslint.org/)

```sh
npm run lint
```
</file>

<file path="src/App.vue">
<template>
  <div id="app">
    <!-- Navigation Header -->
    <header class="bg-blue-600 text-white shadow-lg">
      <nav class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between h-16">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <h1 class="text-xl font-bold">Demo Vinatex</h1>
            </div>
            <div class="hidden md:block ml-10">
              <div class="flex items-baseline space-x-4">
                <RouterLink 
                  to="/" 
                  class="hover:bg-blue-700 px-3 py-2 rounded-md text-sm font-medium transition-colors"
                  :class="{ 'bg-blue-700': $route.path === '/' }"
                >
                  <i class="pi pi-home mr-2"></i>Trang chủ
                </RouterLink>
                <RouterLink 
                  to="/organization-units" 
                  class="hover:bg-blue-700 px-3 py-2 rounded-md text-sm font-medium transition-colors"
                  :class="{ 'bg-blue-700': $route.path === '/organization-units' }"
                >
                  <i class="pi pi-sitemap mr-2"></i>Quản lý Tổ chức
                </RouterLink>
                <RouterLink 
                  to="/about" 
                  class="hover:bg-blue-700 px-3 py-2 rounded-md text-sm font-medium transition-colors"
                  :class="{ 'bg-blue-700': $route.path === '/about' }"
                >
                  <i class="pi pi-info-circle mr-2"></i>Giới thiệu
                </RouterLink>
              </div>
            </div>
          </div>
          
          <!-- Mobile menu button -->
          <div class="md:hidden">
            <Button 
              icon="pi pi-bars" 
              text 
              @click="mobileMenuOpen = !mobileMenuOpen"
              class="text-white"
            />
          </div>
        </div>
        
        <!-- Mobile menu -->
        <div v-if="mobileMenuOpen" class="md:hidden">
          <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3 bg-blue-700 rounded-lg mt-2">
            <RouterLink 
              to="/" 
              class="block hover:bg-blue-800 px-3 py-2 rounded-md text-base font-medium"
              @click="mobileMenuOpen = false"
            >
              <i class="pi pi-home mr-2"></i>Trang chủ
            </RouterLink>
            <RouterLink 
              to="/organization-units" 
              class="block hover:bg-blue-800 px-3 py-2 rounded-md text-base font-medium"
              @click="mobileMenuOpen = false"
            >
              <i class="pi pi-sitemap mr-2"></i>Quản lý Tổ chức
            </RouterLink>
            <RouterLink 
              to="/about" 
              class="block hover:bg-blue-800 px-3 py-2 rounded-md text-base font-medium"
              @click="mobileMenuOpen = false"
            >
              <i class="pi pi-info-circle mr-2"></i>Giới thiệu
            </RouterLink>
          </div>
        </div>
      </nav>
    </header>

    <!-- Main Content -->
    <main class="min-h-screen bg-gray-50">
      <RouterView />
    </main>

    <!-- Footer -->
    <footer class="bg-gray-800 text-white py-8">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="text-center">
          <p>&copy; 2024 Demo Vinatex. All rights reserved.</p>
        </div>
      </div>
    </footer>
  </div>
</template>

<script setup>
import { ref } from 'vue'
import { RouterLink, RouterView } from 'vue-router'

const mobileMenuOpen = ref(false)
</script>

<style scoped>
.router-link-active {
  @apply bg-blue-700;
}

header {
  position: sticky;
  top: 0;
  z-index: 1000;
}
</style>
</file>

<file path="src/main.js">
import { createApp } from 'vue'
import { createPinia } from 'pinia'
import PrimeVue from 'primevue/config'
import Aura from '@primevue/themes/aura'
import ToastService from 'primevue/toastservice'
import ConfirmationService from 'primevue/confirmationservice'

// PrimeVue Components
import Button from 'primevue/button'
import InputText from 'primevue/inputtext'
import Textarea from 'primevue/textarea'
import DataTable from 'primevue/datatable'
import Column from 'primevue/column'
import Dialog from 'primevue/dialog'
import Toast from 'primevue/toast'
import ConfirmDialog from 'primevue/confirmdialog'
import TreeSelect from 'primevue/treeselect'
import Card from 'primevue/card'
import Toolbar from 'primevue/toolbar'
import Breadcrumb from 'primevue/breadcrumb'
import Tag from 'primevue/tag'
import Tree from 'primevue/tree'
import Splitter from 'primevue/splitter'
import SplitterPanel from 'primevue/splitterpanel'
import ProgressSpinner from 'primevue/progressspinner'

import App from './App.vue'
import router from './router'

// Import PrimeIcons CSS
import 'primeicons/primeicons.css'

const app = createApp(App)

app.use(createPinia())
app.use(router)
app.use(PrimeVue, {
  theme: {
    preset: Aura,
    options: {
      darkModeSelector: '.dark-mode'
    }
  }
})
app.use(ToastService)
app.use(ConfirmationService)

// Register PrimeVue components globally
app.component('Button', Button)
app.component('InputText', InputText)
app.component('Textarea', Textarea)
app.component('DataTable', DataTable)
app.component('Column', Column)
app.component('Dialog', Dialog)
app.component('Toast', Toast)
app.component('ConfirmDialog', ConfirmDialog)
app.component('TreeSelect', TreeSelect)
app.component('Card', Card)
app.component('Toolbar', Toolbar)
app.component('Breadcrumb', Breadcrumb)
app.component('Tag', Tag)
app.component('Tree', Tree)
app.component('Splitter', Splitter)
app.component('SplitterPanel', SplitterPanel)
app.component('ProgressSpinner', ProgressSpinner)

app.mount('#app')
</file>

<file path="src/router/index.js">
import { createRouter, createWebHistory } from 'vue-router'
import HomeView from '../views/HomeView.vue'
import OrganizationUnitView from '../views/OrganizationUnitView.vue'

const router = createRouter({
  history: createWebHistory(import.meta.env.BASE_URL),
  routes: [
    {
      path: '/',
      name: 'home',
      component: HomeView
    },
    {
      path: '/organization-units',
      name: 'organization-units',
      component: OrganizationUnitView
    },
    // {
    //   path: '/about',
    //   name: 'about',
    //   // route level code-splitting
    //   // this generates a separate chunk (About.[hash].js) for this route
    //   // which is lazy-loaded when the route is visited.
    //   component: () => import('../views/AboutView.vue')
    // }
  ]
})

export default router
</file>

<file path="src/services/organizationUnitService.js">
import axios from 'axios'

// Cấu hình base URL cho API
const API_BASE = 'https://localhost:44324/api/app/organization-unit' // Thay đổi port theo project của bạn

// Cấu hình axios
const apiClient = axios.create({
  baseURL: API_BASE,
  headers: {
    'Content-Type': 'application/json',
  },
  timeout: 10000, // 10 seconds timeout
})

// Interceptor để handle errors
apiClient.interceptors.response.use(
  (response) => response,
  (error) => {
    console.error('API Error:', error)
    return Promise.reject(error)
  },
)

export const organizationUnitService = {
  // Lấy danh sách phân trang
  async getList(params = {}) {
    const response = await apiClient.get('', { params })
    return response.data
  },

  // Lấy chi tiết một organization unit
  async getById(id) {
    const response = await apiClient.get(`/${id}`)
    return response.data
  },

  // Tạo mới organization unit
  async create(data) {
    const response = await apiClient.post('', data)
    return response.data
  },

  // Cập nhật organization unit
  async update(id, data) {
    const response = await apiClient.put(`/${id}`, data)
    return response.data
  },

  // Xóa organization unit
  async delete(id) {
    const response = await apiClient.delete(`/${id}`)
    return response.data
  },

  // Lấy cây phân cấp: https://localhost:44324/api/app/organization-unit/tree
  async getTree() {
    const response = await apiClient.get('/tree')
    return response.data
  },

  // Lấy danh sách con
  async getChildren(parentId = null) {
    const params = parentId ? { parentId } : {}
    const response = await apiClient.get('/children', { params })
    return response.data
  },

  // Kiểm tra có thể xóa không
  async canDelete(id) {
    const response = await apiClient.get(`/${id}/can-delete`)
    return response.data
  },
}
</file>

<file path="src/stores/counter.js">
import { ref, computed } from 'vue'
import { defineStore } from 'pinia'

export const useCounterStore = defineStore('counter', () => {
  const count = ref(0)
  const doubleCount = computed(() => count.value * 2)
  function increment() {
    count.value++
  }

  return { count, doubleCount, increment }
})
</file>

<file path="src/stores/organizationUnit.js">
import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import { organizationUnitService } from '@/services/organizationUnitService'

export const useOrganizationUnitStore = defineStore('organizationUnit', () => {
  // State
  const units = ref([])
  const tree = ref([])
  const selectedUnit = ref(null)
  const loading = ref(false)
  const totalRecords = ref(0)

  // Getters
  const getUnitById = computed(() => {
    return (id) => units.value.find(unit => unit.id === id)
  })

  const getRootUnits = computed(() => {
    return units.value.filter(unit => !unit.parentId)
  })

  const getChildrenOf = computed(() => {
    return (parentId) => units.value.filter(unit => unit.parentId === parentId)
  })

  // Actions
  async function fetchUnits(params = {}) {
    loading.value = true
    try {
      const defaultParams = {
        skipCount: 0,
        maxResultCount: 100,
        sorting: 'code',
        ...params
      }
      
      const result = await organizationUnitService.getList(defaultParams)
      units.value = result.items || []
      totalRecords.value = result.totalCount || 0
      return result
    } catch (error) {
      console.error('Error fetching units:', error)
      throw error
    } finally {
      loading.value = false
    }
  }

  async function fetchTree() {
    loading.value = true
    try {
      const result = await organizationUnitService.getTree()
      tree.value = result || []
      return result
    } catch (error) {
      console.error('Error fetching tree:', error)
      throw error
    } finally {
      loading.value = false
    }
  }

  async function fetchUnitById(id) {
    loading.value = true
    try {
      const result = await organizationUnitService.getById(id)
      selectedUnit.value = result
      return result
    } catch (error) {
      console.error('Error fetching unit:', error)
      throw error
    } finally {
      loading.value = false
    }
  }

  async function createUnit(data) {
    loading.value = true
    try {
      const result = await organizationUnitService.create(data)
      await fetchUnits() // Refresh list
      await fetchTree() // Refresh tree
      return result
    } catch (error) {
      console.error('Error creating unit:', error)
      throw error
    } finally {
      loading.value = false
    }
  }

  async function updateUnit(id, data) {
    loading.value = true
    try {
      const result = await organizationUnitService.update(id, data)
      await fetchUnits() // Refresh list
      await fetchTree() // Refresh tree
      return result
    } catch (error) {
      console.error('Error updating unit:', error)
      throw error
    } finally {
      loading.value = false
    }
  }

  async function deleteUnit(id) {
    loading.value = true
    try {
      await organizationUnitService.delete(id)
      await fetchUnits() // Refresh list
      await fetchTree() // Refresh tree
    } catch (error) {
      console.error('Error deleting unit:', error)
      throw error
    } finally {
      loading.value = false
    }
  }

  async function canDeleteUnit(id) {
    try {
      return await organizationUnitService.canDelete(id)
    } catch (error) {
      console.error('Error checking can delete:', error)
      return false
    }
  }

  // Convert tree data for TreeSelect component
  function convertToTreeSelectOptions(treeData) {
    return treeData.map(item => ({
      key: item.id,
      label: item.displayName,
      data: item,
      children: item.children?.length > 0 ? convertToTreeSelectOptions(item.children) : []
    }))
  }

  return {
    // State
    units,
    tree,
    selectedUnit,
    loading,
    totalRecords,
    
    // Getters
    getUnitById,
    getRootUnits,
    getChildrenOf,
    
    // Actions
    fetchUnits,
    fetchTree,
    fetchUnitById,
    createUnit,
    updateUnit,
    deleteUnit,
    canDeleteUnit,
    convertToTreeSelectOptions
  }
})
</file>

<file path="src/style.css">
/* Tailwind CSS */
@import 'tailwindcss/base';
@import 'tailwindcss/components';
@import 'tailwindcss/utilities';

/* Custom styles */
:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;
  color-scheme: light;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;
  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-text-size-adjust: 100%;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
  color: #213547;
  background-color: #ffffff;
}

#app {
  width: 100%;
  margin: 0;
  padding: 0;
}

/* PrimeVue overrides */
.p-card {
  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
}

.p-card:hover {
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
}

.p-datatable .p-datatable-header {
  background: #f8fafc;
  border: 1px solid #e2e8f0;
}

.p-datatable .p-datatable-thead > tr > th {
  background: #f1f5f9;
  color: #334155;
  font-weight: 600;
}

.p-dialog .p-dialog-header {
  background: #f8fafc;
  border-bottom: 1px solid #e2e8f0;
}

.p-toolbar {
  background: #f8fafc;
  border: 1px solid #e2e8f0;
}

/* Custom animations */
.fade-enter-active, .fade-leave-active {
  transition: opacity 0.3s ease;
}

.fade-enter-from, .fade-leave-to {
  opacity: 0;
}

/* Responsive utilities */
@media (max-width: 768px) {
  .p-datatable {
    font-size: 0.875rem;
  }
  
  .p-dialog {
    width: 95vw !important;
    margin: 1rem;
  }
}

/* Loading spinner */
.loading-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(255, 255, 255, 0.8);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 9999;
}
</file>

<file path="src/views/HomeView.vue">
<template>
  <div class="p-6">
    <div class="max-w-7xl mx-auto">
      <!-- Welcome Section -->
      <div class="text-center mb-8">
        <h1 class="text-4xl font-bold text-gray-900 mb-4">
          Chào mừng đến với Demo Vinatex
        </h1>
        <p class="text-xl text-gray-600 mb-8">
          Hệ thống quản lý tổ chức doanh nghiệp
        </p>
      </div>

      <!-- Quick Actions -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
        <Card class="hover:shadow-lg transition-shadow cursor-pointer" @click="navigateTo('/organization-units')">
          <template #content>
            <div class="text-center p-4">
              <div class="bg-blue-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4">
                <i class="pi pi-sitemap text-2xl text-blue-600"></i>
              </div>
              <h3 class="text-xl font-semibold mb-2">Quản lý Tổ chức</h3>
              <p class="text-gray-600">Tạo và quản lý cấu trúc tổ chức phân cấp</p>
            </div>
          </template>
        </Card>

        <Card class="hover:shadow-lg transition-shadow">
          <template #content>
            <div class="text-center p-4">
              <div class="bg-green-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4">
                <i class="pi pi-users text-2xl text-green-600"></i>
              </div>
              <h3 class="text-xl font-semibold mb-2">Quản lý Nhân viên</h3>
              <p class="text-gray-600">Phân công nhân viên vào các đơn vị</p>
            </div>
          </template>
        </Card>

        <Card class="hover:shadow-lg transition-shadow">
          <template #content>
            <div class="text-center p-4">
              <div class="bg-purple-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4">
                <i class="pi pi-chart-bar text-2xl text-purple-600"></i>
              </div>
              <h3 class="text-xl font-semibold mb-2">Báo cáo</h3>
              <p class="text-gray-600">Xem báo cáo và thống kê tổ chức</p>
            </div>
          </template>
        </Card>
      </div>

      <!-- Statistics -->
      <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
        <Card>
          <template #content>
            <div class="text-center p-4">
              <div class="text-2xl font-bold text-blue-600 mb-2">{{ stats.totalUnits }}</div>
              <div class="text-gray-600">Tổng đơn vị</div>
            </div>
          </template>
        </Card>

        <Card>
          <template #content>
            <div class="text-center p-4">
              <div class="text-2xl font-bold text-green-600 mb-2">{{ stats.rootUnits }}</div>
              <div class="text-gray-600">Đơn vị gốc</div>
            </div>
          </template>
        </Card>

        <Card>
          <template #content>
            <div class="text-center p-4">
              <div class="text-2xl font-bold text-purple-600 mb-2">{{ stats.maxDepth }}</div>
              <div class="text-gray-600">Cấp sâu nhất</div>
            </div>
          </template>
        </Card>

        <Card>
          <template #content>
            <div class="text-center p-4">
              <div class="text-2xl font-bold text-orange-600 mb-2">{{ stats.lastUpdated }}</div>
              <div class="text-gray-600">Cập nhật cuối</div>
            </div>
          </template>
        </Card>
      </div>

      <!-- Recent Activity -->
      <Card>
        <template #title>
          <div class="flex items-center gap-2">
            <i class="pi pi-clock"></i>
            Hoạt động gần đây
          </div>
        </template>
        <template #content>
          <div v-if="recentUnits.length === 0" class="text-center text-gray-500 py-8">
            <i class="pi pi-info-circle text-4xl mb-4"></i>
            <p>Chưa có hoạt động nào</p>
          </div>
          <div v-else class="space-y-3">
            <div 
              v-for="unit in recentUnits" 
              :key="unit.id"
              class="flex items-center justify-between p-3 bg-gray-50 rounded-lg"
            >
              <div class="flex items-center gap-3">
                <i class="pi pi-sitemap text-blue-500"></i>
                <div>
                  <div class="font-medium">{{ unit.displayName }}</div>
                  <div class="text-sm text-gray-500">{{ unit.parentName || 'Đơn vị gốc' }}</div>
                </div>
              </div>
              <div class="text-sm text-gray-500">
                {{ formatDate(unit.creationTime) }}
              </div>
            </div>
          </div>
        </template>
      </Card>
    </div>
  </div>
</template>

<script setup>
import { ref, computed, onMounted } from 'vue'
import { useRouter } from 'vue-router'
import { useOrganizationUnitStore } from '@/stores/organizationUnit'

const router = useRouter()
const store = useOrganizationUnitStore()

const stats = ref({
  totalUnits: 0,
  rootUnits: 0,
  maxDepth: 0,
  lastUpdated: '-'
})

const recentUnits = computed(() => {
  return store.units
    .slice()
    .sort((a, b) => new Date(b.creationTime) - new Date(a.creationTime))
    .slice(0, 5)
})

function navigateTo(path) {
  router.push(path)
}

function formatDate(dateString) {
  if (!dateString) return '-'
  const date = new Date(dateString)
  return date.toLocaleDateString('vi-VN', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  })
}

function calculateStats() {
  stats.value.totalUnits = store.units.length
  stats.value.rootUnits = store.units.filter(u => !u.parentId).length
  
  // Calculate max depth
  let maxDepth = 0
  store.units.forEach(unit => {
    const depth = (unit.code?.split('.').length || 1)
    if (depth > maxDepth) {
      maxDepth = depth
    }
  })
  stats.value.maxDepth = maxDepth

  // Last updated
  if (store.units.length > 0) {
    const lastUnit = store.units.reduce((latest, current) => {
      return new Date(current.lastModificationTime || current.creationTime) > 
             new Date(latest.lastModificationTime || latest.creationTime) ? current : latest
    })
    stats.value.lastUpdated = formatDate(lastUnit.lastModificationTime || lastUnit.creationTime)
  }
}

onMounted(async () => {
  try {
    await store.fetchUnits({ maxResultCount: 1000 }) // Load all for stats
    calculateStats()
  } catch (error) {
    console.error('Error loading data:', error)
  }
})
</script>

<style scoped>
.space-y-3 > * + * {
  margin-top: 0.75rem;
}
</style>
</file>

<file path="src/views/OrganizationUnitView.vue">
<template>
  <div class="p-4">
    <Toast />
    <ConfirmDialog />
    
    <!-- Header -->
    <div class="mb-4">
      <h2 class="text-2xl font-bold text-gray-800 mb-2">Quản lý Đơn vị Tổ chức</h2>
      <Breadcrumb :model="breadcrumbItems" />
    </div>

    <!-- Main Content -->
    <Splitter style="height: 600px">
      <!-- Tree Panel -->
      <SplitterPanel :size="30" class="p-3">
        <Card>
          <template #title>
            <div class="flex justify-between items-center">
              <span>Cây Tổ chức</span>
              <Button 
                icon="pi pi-refresh" 
                size="small" 
                text 
                @click="refreshTree"
                :loading="store.loading"
              />
            </div>
          </template>
          <template #content>
            <Tree 
              v-model:selectionKeys="selectedTreeKeys"
              :value="treeNodes"
              selectionMode="single"
              @node-select="onTreeNodeSelect"
              class="w-full"
            >
              <template #default="{ node }">
                <div class="flex items-center gap-2">
                  <i class="pi pi-sitemap text-blue-500"></i>
                  <span>{{ node.label }}</span>
                  <Tag 
                    v-if="node.data.code" 
                    :value="node.data.code" 
                    severity="info" 
                    size="small"
                  />
                </div>
              </template>
            </Tree>
          </template>
        </Card>
      </SplitterPanel>

      <!-- Data Table Panel -->
      <SplitterPanel :size="70" class="p-3">
        <Card>
          <template #title>
            Danh sách Đơn vị
          </template>
          <template #content>
            <!-- Toolbar -->
            <Toolbar class="mb-4">
              <template #start>
                <Button 
                  label="Thêm mới" 
                  icon="pi pi-plus" 
                  @click="openDialog()"
                  class="mr-2"
                />
                <Button 
                  label="Làm mới" 
                  icon="pi pi-refresh" 
                  outlined 
                  @click="refreshData"
                  :loading="store.loading"
                />
              </template>
              <template #end>
                <span class="p-input-icon-left">
                  <i class="pi pi-search" />
                  <InputText 
                    v-model="filters.filter" 
                    placeholder="Tìm kiếm..." 
                    @keyup.enter="searchUnits"
                    class="w-64"
                  />
                </span>
              </template>
            </Toolbar>

            <!-- Data Table -->
            <DataTable
              v-model:selection="selectedUnits"
              :value="store.units"
              :loading="store.loading"
              paginator
              :rows="pageSize"
              :totalRecords="store.totalRecords"
              lazy
              @page="onPage"
              @sort="onSort"
              dataKey="id"
              class="p-datatable-gridlines"
              showGridlines
              stripedRows
            >
              <Column selectionMode="multiple" headerStyle="width: 3rem"></Column>
              
              <Column field="displayName" header="Tên hiển thị" sortable>
                <template #body="slotProps">
                  <div class="flex items-center gap-2">
                    <i class="pi pi-sitemap text-blue-500"></i>
                    <strong>{{ slotProps.data.displayName }}</strong>
                  </div>
                </template>
              </Column>
              
              <Column field="name" header="Tên" sortable></Column>
              
              <Column field="code" header="Mã" sortable>
                <template #body="slotProps">
                  <Tag :value="slotProps.data.code" severity="info" />
                </template>
              </Column>
              
              <Column field="parentName" header="Đơn vị cha">
                <template #body="slotProps">
                  <span v-if="slotProps.data.parentName" class="text-gray-600">
                    {{ slotProps.data.parentName }}
                  </span>
                  <Tag v-else value="Gốc" severity="success" />
                </template>
              </Column>
              
              <Column field="description" header="Mô tả">
                <template #body="slotProps">
                  <span class="text-gray-600">
                    {{ slotProps.data.description || '-' }}
                  </span>
                </template>
              </Column>
              
              <Column header="Thao tác" style="width: 120px">
                <template #body="slotProps">
                  <div class="flex gap-1">
                    <Button 
                      icon="pi pi-pencil" 
                      size="small" 
                      text 
                      @click="openDialog(slotProps.data)"
                      v-tooltip="'Sửa'"
                    />
                    <Button 
                      icon="pi pi-trash" 
                      size="small" 
                      text 
                      severity="danger" 
                      @click="confirmDelete(slotProps.data)"
                      v-tooltip="'Xóa'"
                    />
                  </div>
                </template>
              </Column>
            </DataTable>
          </template>
        </Card>
      </SplitterPanel>
    </Splitter>

    <!-- Dialog Form -->
    <Dialog 
      v-model:visible="dialogVisible" 
      :header="dialogTitle"
      :modal="true" 
      class="p-fluid" 
      :style="{ width: '500px' }"
    >
      <form @submit.prevent="submitForm" class="space-y-4">
        <!-- Tên -->
        <div class="field">
          <label for="name" class="block text-sm font-medium mb-2">Tên *</label>
          <InputText 
            id="name"
            v-model="form.name" 
            :class="{ 'p-invalid': formErrors.name }"
            placeholder="Nhập tên đơn vị"
          />
          <small v-if="formErrors.name" class="p-error">{{ formErrors.name }}</small>
        </div>

        <!-- Tên hiển thị -->
        <div class="field">
          <label for="displayName" class="block text-sm font-medium mb-2">Tên hiển thị *</label>
          <InputText 
            id="displayName"
            v-model="form.displayName" 
            :class="{ 'p-invalid': formErrors.displayName }"
            placeholder="Nhập tên hiển thị"
          />
          <small v-if="formErrors.displayName" class="p-error">{{ formErrors.displayName }}</small>
        </div>

        <!-- Đơn vị cha -->
        <div class="field">
          <label for="parent" class="block text-sm font-medium mb-2">Đơn vị cha</label>
          <TreeSelect 
            v-model="form.parentId"
            :options="treeSelectOptions"
            placeholder="Chọn đơn vị cha"
            class="w-full"
          />
        </div>

        <!-- Mô tả -->
        <div class="field">
          <label for="description" class="block text-sm font-medium mb-2">Mô tả</label>
          <Textarea 
            id="description"
            v-model="form.description" 
            rows="3"
            placeholder="Nhập mô tả"
          />
        </div>
      </form>

      <template #footer>
        <Button label="Hủy" icon="pi pi-times" text @click="closeDialog" />
        <Button 
          label="Lưu" 
          icon="pi pi-check" 
          @click="submitForm"
          :loading="store.loading"
        />
      </template>
    </Dialog>
  </div>
</template>

<script setup>
import { ref, reactive, computed, onMounted, watch } from 'vue'
import { useToast } from 'primevue/usetoast'
import { useConfirm } from 'primevue/useconfirm'
import { useOrganizationUnitStore } from '@/stores/organizationUnit'

// Composables
const toast = useToast()
const confirm = useConfirm()
const store = useOrganizationUnitStore()

// Reactive data
const dialogVisible = ref(false)
const editingUnit = ref(null)
const selectedUnits = ref([])
const selectedTreeKeys = ref({})
const pageSize = ref(10)
const currentPage = ref(0)

const form = reactive({
  name: '',
  displayName: '',
  description: '',
  parentId: null
})

const formErrors = reactive({
  name: '',
  displayName: ''
})

const filters = reactive({
  filter: '',
  sorting: 'code'
})

const breadcrumbItems = ref([
  { label: 'Trang chủ', icon: 'pi pi-home' },
  { label: 'Quản lý tổ chức' }
])

// Computed
const dialogTitle = computed(() => 
  editingUnit.value ? 'Sửa Đơn vị Tổ chức' : 'Thêm Đơn vị Tổ chức'
)

const treeNodes = computed(() => {
  return convertToTreeNodes(store.tree)
})

const treeSelectOptions = computed(() => {
  return store.convertToTreeSelectOptions(store.tree)
})

// Methods
function convertToTreeNodes(treeData) {
  return treeData.map(item => ({
    key: item.id,
    label: item.displayName,
    data: item,
    children: item.children?.length > 0 ? convertToTreeNodes(item.children) : []
  }))
}

function resetForm() {
  form.name = ''
  form.displayName = ''
  form.description = ''
  form.parentId = null
  formErrors.name = ''
  formErrors.displayName = ''
}

function validateForm() {
  let isValid = true
  
  if (!form.name?.trim()) {
    formErrors.name = 'Tên không được để trống'
    isValid = false
  } else {
    formErrors.name = ''
  }
  
  if (!form.displayName?.trim()) {
    formErrors.displayName = 'Tên hiển thị không được để trống'
    isValid = false
  } else {
    formErrors.displayName = ''
  }
  
  return isValid
}

async function submitForm() {
  if (!validateForm()) return

  try {
    const data = {
      name: form.name.trim(),
      displayName: form.displayName.trim(),
      description: form.description?.trim() || null,
      parentId: form.parentId || null
    }

    if (editingUnit.value) {
      await store.updateUnit(editingUnit.value.id, data)
      toast.add({
        severity: 'success',
        summary: 'Thành công',
        detail: 'Cập nhật đơn vị thành công',
        life: 3000
      })
    } else {
      await store.createUnit(data)
      toast.add({
        severity: 'success',
        summary: 'Thành công', 
        detail: 'Thêm đơn vị thành công',
        life: 3000
      })
    }

    closeDialog()
  } catch (error) {
    console.error('Submit error:', error)
    toast.add({
      severity: 'error',
      summary: 'Lỗi',
      detail: error.response?.data?.error?.message || 'Có lỗi xảy ra',
      life: 5000
    })
  }
}

function openDialog(unit = null) {
  editingUnit.value = unit
  if (unit) {
    form.name = unit.name
    form.displayName = unit.displayName
    form.description = unit.description
    form.parentId = unit.parentId
  } else {
    resetForm()
  }
  dialogVisible.value = true
}

function closeDialog() {
  dialogVisible.value = false
  editingUnit.value = null
  resetForm()
}

async function confirmDelete(unit) {
  try {
    const canDelete = await store.canDeleteUnit(unit.id)
    
    if (!canDelete) {
      toast.add({
        severity: 'warn',
        summary: 'Cảnh báo',
        detail: 'Không thể xóa đơn vị có đơn vị con',
        life: 3000
      })
      return
    }

    confirm.require({
      message: `Bạn có chắc muốn xóa đơn vị "${unit.displayName}"?`,
      header: 'Xác nhận xóa',
      icon: 'pi pi-exclamation-triangle',
      rejectClass: 'p-button-secondary p-button-outlined',
      rejectLabel: 'Hủy',
      acceptLabel: 'Xóa',
      accept: async () => {
        try {
          await store.deleteUnit(unit.id)
          toast.add({
            severity: 'success',
            summary: 'Thành công',
            detail: 'Xóa đơn vị thành công',
            life: 3000
          })
        } catch (error) {
          console.error('Delete error:', error)
          toast.add({
            severity: 'error',
            summary: 'Lỗi',
            detail: 'Có lỗi khi xóa đơn vị',
            life: 5000
          })
        }
      }
    })
  } catch (error) {
    console.error('Can delete check error:', error)
  }
}

function onTreeNodeSelect(node) {
  // Optional: Filter table by selected tree node
  console.log('Selected tree node:', node)
}

async function onPage(event) {
  currentPage.value = event.page
  await loadUnits({
    skipCount: event.first,
    maxResultCount: event.rows
  })
}

async function onSort(event) {
  filters.sorting = event.sortField + (event.sortOrder === -1 ? ' desc' : '')
  await loadUnits()
}

async function searchUnits() {
  await loadUnits()
}

async function loadUnits(params = {}) {
  const requestParams = {
    skipCount: currentPage.value * pageSize.value,
    maxResultCount: pageSize.value,
    sorting: filters.sorting,
    filter: filters.filter,
    ...params
  }
  await store.fetchUnits(requestParams)
}

async function refreshData() {
  await Promise.all([
    loadUnits(),
    store.fetchTree()
  ])
}

async function refreshTree() {
  await store.fetchTree()
}

// Lifecycle
onMounted(async () => {
  await refreshData()
})

// Watch for form name changes to auto-fill displayName
watch(() => form.name, (newValue) => {
  if (!form.displayName && newValue) {
    form.displayName = newValue
  }
})
</script>

<style scoped>
.field {
  margin-bottom: 1rem;
}

.p-error {
  color: #e24c4c;
  font-size: 0.875rem;
}

.p-datatable .p-datatable-tbody > tr > td {
  padding: 0.75rem;
}

.space-y-4 > * + * {
  margin-top: 1rem;
}
</style>
</file>

<file path="taiwind.config.cjs">
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{vue,js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#eff6ff',
          100: '#dbeafe',
          200: '#bfdbfe',
          300: '#93c5fd',
          400: '#60a5fa',
          500: '#3b82f6',
          600: '#2563eb',
          700: '#1d4ed8',
          800: '#1e40af',
          900: '#1e3a8a',
        }
      },
      fontFamily: {
        sans: ['Inter', 'system-ui', 'sans-serif'],
      },
    },
  },
  plugins: [],
}
</file>

<file path="vite.config.js">
import { fileURLToPath, URL } from 'node:url'
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import basicSsl from '@vitejs/plugin-basic-ssl' // <— thêm

export default defineConfig({
  plugins: [vue(), basicSsl()],
  resolve: {
    alias: { '@': fileURLToPath(new URL('./src', import.meta.url)) },
  },
  server: {
    // để Vite chạy cổng mặc định 5173 (hoặc đặt số khác), KHÔNG dùng 44324
    https: true,         // HTTPS dev dùng self-signed cert của plugin basic-ssl
    host: 'localhost',
    port: 5173,
    proxy: {
      // tất cả request bắt đầu /api chuyển sang backend .NET
      '/api': {
        target: 'https://localhost:44324',
        changeOrigin: true,
        secure: false,   // dev cert tự ký của .NET
      },
    },
  },
})
</file>

</files>
